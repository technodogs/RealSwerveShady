// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3707.RealSwerveShady.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc3707.RealSwerveShady.Robot;
import org.usfirst.frc3707.RealSwerveShady.RobotMap;

/**
 *
 */
public class publishSonarReadings extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public publishSonarReadings() {
        setRunWhenDisabled(true);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.senorsSubsystem);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
//    	SmartDashboard.putNumber("Forward Right Detect", Math.round(RobotMap.forwardRightSonar.getDistance()));
//    	SmartDashboard.putNumber("Forward Left Detect", Math.round(RobotMap.forwardLeftSonar.getDistance()));
//    	SmartDashboard.putNumber("Right Side For Detect", Math.round(RobotMap.rightSideForSonar.getDistance()));
//    	SmartDashboard.putNumber("Right Side Aft Detect", Math.round(RobotMap.rightSideAftSonar.getDistance()));
//    	SmartDashboard.putNumber("Left Side For Detect", Math.round(RobotMap.leftSideForSonar.getDistance()));
//    	SmartDashboard.putNumber("Left Side Aft Detect", Math.round(RobotMap.leftSideAftSonar.getDistance()));
    	SmartDashboard.putNumber("lidar", Math.round(RobotMap.lidar.getDistance()));
    	
    	Robot.driveSystem.publishCanDashboard();
    	
    	SmartDashboard.putBoolean("clawHasBox", Robot.clawSubsystem.haveBox());
    	SmartDashboard.putBoolean("floorIsWhite", RobotMap.senorsSubsystemfloorReader.get());
    	if(Robot.clawSubsystem.haveBox()) {
    		RobotMap.boxLed.set(true);
    	}
    	else {
    		RobotMap.boxLed.set(false);
    	}
    	
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
