
// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3707.RealSwerveShady.subsystems;

import org.usfirst.frc3707.RealSwerveShady.RobotMap;
import org.usfirst.frc3707.RealSwerveShady.commands.*;

import org.usfirst.frc3707.lib.swerve.SwerveDrive;
import org.usfirst.frc3707.lib.swerve.SwerveWheel;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.ADXRS450_Gyro;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.VictorSP;
import edu.wpi.first.wpilibj.smartdashboard.*;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class DriveSystem extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final AnalogPotentiometer frontRightEncoder = RobotMap.driveSystemFrontRightEncoder;
    private final WPI_VictorSPX frontRightSwerve = RobotMap.driveSystemFrontRightSwerve;
    private final PIDController frontRightTwist = RobotMap.driveSystemFrontRightTwist;
    private final AnalogPotentiometer frontLeftEncoder = RobotMap.driveSystemFrontLeftEncoder;
    private final WPI_VictorSPX frontLeftSwerve = RobotMap.driveSystemFrontLeftSwerve;
    private final PIDController frontLeftTwist = RobotMap.driveSystemFrontLeftTwist;
    private final AnalogPotentiometer backRightEncoder = RobotMap.driveSystemBackRightEncoder;
    private final WPI_VictorSPX backRightSwerve = RobotMap.driveSystemBackRightSwerve;
    private final PIDController backRightTwist = RobotMap.driveSystemBackRightTwist;
    private final AnalogPotentiometer backLeftEncoder = RobotMap.driveSystemBackLeftEncoder;
    private final WPI_VictorSPX backLeftSwerve = RobotMap.driveSystemBackLeftSwerve;
    private final PIDController backLeftTwist = RobotMap.driveSystemBackLeftTwist;
    private final SpeedController frontRightDrive = RobotMap.driveSystemFrontRightDrive;
    private final SpeedController frontLeftDrive = RobotMap.driveSystemFrontLeftDrive;
    private final SpeedController backRightDrive = RobotMap.driveSystemBackRightDrive;
    private final SpeedController backLeftDrive = RobotMap.driveSystemBackLeftDrive;
    private final Encoder backLeftDistanceEncoder = RobotMap.driveSystemBackLeftDistanceEncoder;
    private final Encoder backRightDistanceEncoder = RobotMap.driveSystemBackRightDistanceEncoder;
    private final Encoder frontLeftDistanceEncoder = RobotMap.driveSystemFrontLeftDistanceEncoder;
    private final Encoder frontRightDistanceEncoder = RobotMap.driveSystemFrontRightDistanceEncoder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new joystick_drive_swerve());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    public final ADXRS450_Gyro gyro = RobotMap.gyro;
    
      //PRACTICE ROBOT
    SwerveWheel frontLeftWheel = new SwerveWheel(frontLeftTwist, frontLeftDrive, 333, frontLeftDistanceEncoder); //340Preferences.getInstance().getDouble("frontLeftOffset", -20)
    SwerveWheel frontRightWheel = new SwerveWheel(frontRightTwist, frontRightDrive, 161, frontRightDistanceEncoder); //341
    SwerveWheel backLeftWheel = new SwerveWheel(backLeftTwist, backLeftDrive, 192, backLeftDistanceEncoder); //210
    SwerveWheel backRightWheel = new SwerveWheel(backRightTwist, backRightDrive, 30, backRightDistanceEncoder); //12
   
    // COMP ROBOT
//    SwerveWheel frontLeftWheel = new SwerveWheel(frontLeftTwist, frontLeftDrive, 201, frontLeftDistanceEncoder);
//    SwerveWheel frontRightWheel = new SwerveWheel(frontRightTwist, frontRightDrive, 39, frontRightDistanceEncoder);
//    SwerveWheel backLeftWheel = new SwerveWheel(backLeftTwist, backLeftDrive, 284, backLeftDistanceEncoder);
//    SwerveWheel backRightWheel = new SwerveWheel(backRightTwist, backRightDrive, 146, backRightDistanceEncoder);
    public SwerveDrive swerve = new SwerveDrive(frontRightWheel, frontLeftWheel, backLeftWheel, backRightWheel, gyro);
    
    public void enable() {
	    	frontLeftTwist.enable();
	    	frontRightWheel.enable();
	    	backLeftWheel.enable();
	    	backRightWheel.enable();
    }
    
    public void disable() {
	    	frontLeftTwist.disable();
	    	frontRightWheel.disable();
	    	backLeftWheel.disable();
	    	backRightWheel.disable();
    }
    public void drive(double directionX, double directionY, double rotation, boolean useGyro, boolean slowSpeed) {
	    	swerve.drive(directionX, directionY, rotation, useGyro, slowSpeed);
	    	SmartDashboard.putData(gyro);
	    	displayEncoders();
    }

    public void resetEncoders() {
	    	backLeftDistanceEncoder.reset();
	    	backRightDistanceEncoder.reset();
	    	frontLeftDistanceEncoder.reset();
	    	frontRightDistanceEncoder.reset();
    }
    public void displayEncoders() {
    	SmartDashboard.putNumber("BL", backLeftDistanceEncoder.getDistance());
    	SmartDashboard.putNumber("BR", backRightDistanceEncoder.getDistance());
    	SmartDashboard.putNumber("FL", frontLeftDistanceEncoder.getDistance());
    	SmartDashboard.putNumber("FR", frontRightDistanceEncoder.getDistance());
    }
    public void driveSimple(double speed, double angle) {
    		swerve.driveSimple(speed, angle);
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

