// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3707.RealSwerveShady;

import edu.wpi.cscore.CvSink;
import edu.wpi.cscore.CvSource;
import edu.wpi.cscore.UsbCamera;
import edu.wpi.first.networktables.NetworkTableInstance;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import java.util.ArrayList;

import org.opencv.core.*;
import org.opencv.imgproc.Imgproc;
import org.usfirst.frc3707.RealSwerveShady.commands.*;
import org.usfirst.frc3707.RealSwerveShady.subsystems.*;
import org.usfirst.frc3707.lib.video.GripPipeline;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {

    Command autonomousCommand;
    SendableChooser<Command> chooser = new SendableChooser<>();

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveSystem driveSystem;
    public static clawLiftSubsystem clawLiftSubsystem;
    public static clawSubsystem clawSubsystem;
    public static winchSubsystem winchSubsystem;
    public static senorsSubsystem senorsSubsystem;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
        RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveSystem = new DriveSystem();
        clawLiftSubsystem = new clawLiftSubsystem();
        clawSubsystem = new clawSubsystem();
        winchSubsystem = new winchSubsystem();
        senorsSubsystem = new senorsSubsystem();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // Add commands to Autonomous Sendable Chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        chooser.addObject("auto_strategy_positionLeft", new auto_strategy_positionLeft());
        chooser.addObject("auto_strategy_positionLeft_oneAndDone", new auto_strategy_positionLeft_oneAndDone());
        chooser.addObject("auto_strategy_positionLeft_noRightScale", new auto_strategy_positionLeft_noRightScale());
        chooser.addObject("auto_strategy_positionRight", new auto_strategy_positionRight());
        chooser.addObject("auto_strategy_positionCenter", new auto_strategy_positionCenter());
        chooser.addObject("auto_strategy_positionCenter_oneSwitchOneLeftScale", new auto_strategy_positionCenter_oneSwitchOneLeftScale());
        chooser.addObject("worlds_left_leftScale_or_leftSwitch", new worlds_left_leftScale_or_leftSwitch());
        chooser.addObject("zDriveToDistance", new zDriveToDistance(12));
        chooser.addDefault("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        SmartDashboard.putData("Auto mode", chooser);
        
        UsbCamera camera = CameraServer.getInstance().startAutomaticCapture("FrontViewRaw", 0);
        //UsbCamera camera2 = CameraServer.getInstance().startAutomaticCapture("FrontViewRaw2", 1);
        
        //CameraServer.getInstance().
        
//        new Thread(() -> {        
//            UsbCamera cameraDirect = new UsbCamera("cam", 0);
//            camera.setResolution(80, 60);
//            camera.setFPS(30);
//            //camera.setBrightness(50);
//            //camera.setExposureManual(10);
//            camera.setExposureAuto();
//            camera.setWhiteBalanceAuto();
//            //camera.setWhiteBalanceManual(3000);
//            
//            
//            CvSink cvSink = CameraServer.getInstance().getVideo();
//            CvSource outputStream = CameraServer.getInstance().putVideo("FrontViewData", 80, 60);
//            outputStream.setFPS(30);
//            
//            CvSink cvSink = CameraServer.getInstance().getVideo();
////            CvSource outputStream = CameraServer.getInstance().putVideo("FrontViewData", 640, 480);
////            outputStream.setFPS(30);
////            
//            Mat source = new Mat();
////            Mat output = new Mat();
//            
//            GripPipeline grip = new GripPipeline();
//            ArrayList<MatOfPoint> contours;
//            MatOfPoint bestContour;
//            
//            while(!Thread.interrupted()) {
//            	if(SmartDashboard.getBoolean("useVision", false)) {
//	                cvSink.grabFrame(source);
//	                grip.process(source);
//	                contours = grip.filterContoursOutput();
//	                if(contours.size() != 0) {
//	                	bestContour = contours.get(0);
//	                	Rect r = Imgproc.boundingRect(bestContour);
//	                	SmartDashboard.putBoolean("boxSee", true);
//	                	SmartDashboard.putNumber("boxCenterX", (r.width / 2) + r.x);
//	                }
//	                else {
//	                	SmartDashboard.putBoolean("boxSee", false);
//	                	SmartDashboard.putNumber("boxCenterX", -1);
//	                }
//            	}
//                try {
//                	Thread.yield();
//					Thread.sleep(50);
//				} catch (InterruptedException e) {
//					// TODO Auto-generated catch block
//					e.printStackTrace();
//				}
//            }
//        }).start();
        
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){

    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {
        autonomousCommand = chooser.getSelected();
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
    }
}
