// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3707.RealSwerveShady;

import edu.wpi.first.wpilibj.ADXRS450_Gyro;
// BEGIN ERW
import org.usfirst.frc3707.lib.pwinput.*;
import edu.wpi.first.wpilibj.DigitalOutput;
// END ERW

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.VictorSP;
import edu.wpi.first.wpilibj.smartdashboard.*;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static AnalogPotentiometer driveSystemFrontRightEncoder;
    public static WPI_VictorSPX driveSystemFrontRightSwerve;
    public static PIDController driveSystemFrontRightTwist;
    public static AnalogPotentiometer driveSystemFrontLeftEncoder;
    public static WPI_VictorSPX driveSystemFrontLeftSwerve;
    public static PIDController driveSystemFrontLeftTwist;
    public static AnalogPotentiometer driveSystemBackRightEncoder;
    public static WPI_VictorSPX driveSystemBackRightSwerve;
    public static PIDController driveSystemBackRightTwist;
    public static AnalogPotentiometer driveSystemBackLeftEncoder;
    public static WPI_VictorSPX driveSystemBackLeftSwerve;
    public static PIDController driveSystemBackLeftTwist;
    public static SpeedController driveSystemFrontRightDrive;
    public static SpeedController driveSystemFrontLeftDrive;
    public static SpeedController driveSystemBackRightDrive;
    public static SpeedController driveSystemBackLeftDrive;
    public static SpeedController clawLiftSubsystemclawLiftMotor;
    public static DigitalInput clawLiftSubsystemliftLow;
    public static DigitalInput clawLiftSubsystemliftMiddle;
    public static DigitalInput clawLiftSubsystemliftHigh;
    public static DigitalInput clawSubsystemboxState;
    public static WPI_VictorSPX clawSubsystemleftClaw;
    public static WPI_VictorSPX clawSubsystemrightClaw;
    public static SpeedController winchSubsystemwinchMotor;
    public static DigitalInput senorsSubsystemfloorReader;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    // BEGIN ERW 
    // Sonic sensors
//    public static PWInput forwardRightSonar;
//    public static PWInput forwardLeftSonar;
//    public static PWInput rightSideForSonar;
//    public static PWInput rightSideAftSonar;
//    public static PWInput leftSideForSonar;
//    public static PWInput leftSideAftSonar;
    public static PWInput lidar;
    public static DigitalOutput boxLed;
    // END ERW
    
    public static ADXRS450_Gyro gyro;

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveSystemFrontRightEncoder = new AnalogPotentiometer(1, 360.0, 0.0);
        LiveWindow.addSensor("DriveSystem", "FrontRightEncoder", driveSystemFrontRightEncoder);
        
        driveSystemFrontRightSwerve = new WPI_VictorSPX(1);
        
        
        driveSystemFrontRightTwist = new PIDController(0.05, 0.0, 0.0, 0.0, driveSystemFrontRightEncoder, driveSystemFrontRightSwerve, 0.02);
        LiveWindow.addActuator("DriveSystem", "FrontRightTwist", driveSystemFrontRightTwist);
        driveSystemFrontRightTwist.setContinuous(false);
        driveSystemFrontRightTwist.setAbsoluteTolerance(0.2);

        driveSystemFrontRightTwist.setOutputRange(-1.0, 1.0);
        driveSystemFrontLeftEncoder = new AnalogPotentiometer(0, 360.0, 0.0);
        LiveWindow.addSensor("DriveSystem", "FrontLeftEncoder", driveSystemFrontLeftEncoder);
        
        driveSystemFrontLeftSwerve = new WPI_VictorSPX(4);
        
        
        driveSystemFrontLeftTwist = new PIDController(0.05, 0.0, 0.0, 0.0, driveSystemFrontLeftEncoder, driveSystemFrontLeftSwerve, 0.02);
        LiveWindow.addActuator("DriveSystem", "FrontLeftTwist", driveSystemFrontLeftTwist);
        driveSystemFrontLeftTwist.setContinuous(false);
        driveSystemFrontLeftTwist.setAbsoluteTolerance(0.2);

        driveSystemFrontLeftTwist.setOutputRange(-1.0, 1.0);
        driveSystemBackRightEncoder = new AnalogPotentiometer(2, 360.0, 0.0);
        LiveWindow.addSensor("DriveSystem", "BackRightEncoder", driveSystemBackRightEncoder);
        
        driveSystemBackRightSwerve = new WPI_VictorSPX(2);
        
        
        driveSystemBackRightTwist = new PIDController(0.05, 0.0, 0.0, 0.0, driveSystemBackRightEncoder, driveSystemBackRightSwerve, 0.02);
        LiveWindow.addActuator("DriveSystem", "BackRightTwist", driveSystemBackRightTwist);
        driveSystemBackRightTwist.setContinuous(false);
        driveSystemBackRightTwist.setAbsoluteTolerance(0.2);

        driveSystemBackRightTwist.setOutputRange(-1.0, 1.0);
        driveSystemBackLeftEncoder = new AnalogPotentiometer(3, 360.0, 0.0);
        LiveWindow.addSensor("DriveSystem", "BackLeftEncoder", driveSystemBackLeftEncoder);
        
        driveSystemBackLeftSwerve = new WPI_VictorSPX(3);
        
        
        driveSystemBackLeftTwist = new PIDController(0.05, 0.0, 0.0, 0.0, driveSystemBackLeftEncoder, driveSystemBackLeftSwerve, 0.02);
        LiveWindow.addActuator("DriveSystem", "BackLeftTwist", driveSystemBackLeftTwist);
        driveSystemBackLeftTwist.setContinuous(false);
        driveSystemBackLeftTwist.setAbsoluteTolerance(0.2);

        driveSystemBackLeftTwist.setOutputRange(-1.0, 1.0);
        driveSystemFrontRightDrive = new VictorSP(1);
        LiveWindow.addActuator("DriveSystem", "FrontRightDrive", (VictorSP) driveSystemFrontRightDrive);
        driveSystemFrontRightDrive.setInverted(false);
        driveSystemFrontLeftDrive = new VictorSP(0);
        LiveWindow.addActuator("DriveSystem", "FrontLeftDrive", (VictorSP) driveSystemFrontLeftDrive);
        driveSystemFrontLeftDrive.setInverted(false);
        driveSystemBackRightDrive = new VictorSP(2);
        LiveWindow.addActuator("DriveSystem", "BackRightDrive", (VictorSP) driveSystemBackRightDrive);
        driveSystemBackRightDrive.setInverted(false);
        driveSystemBackLeftDrive = new VictorSP(3);
        LiveWindow.addActuator("DriveSystem", "BackLeftDrive", (VictorSP) driveSystemBackLeftDrive);
        driveSystemBackLeftDrive.setInverted(false);
        clawLiftSubsystemclawLiftMotor = new VictorSP(4);
        LiveWindow.addActuator("clawLiftSubsystem", "clawLiftMotor", (VictorSP) clawLiftSubsystemclawLiftMotor);
        clawLiftSubsystemclawLiftMotor.setInverted(false);
        clawLiftSubsystemliftLow = new DigitalInput(2);
        LiveWindow.addSensor("clawLiftSubsystem", "liftLow", clawLiftSubsystemliftLow);
        
        clawLiftSubsystemliftMiddle = new DigitalInput(1);
        LiveWindow.addSensor("clawLiftSubsystem", "liftMiddle", clawLiftSubsystemliftMiddle);
        
        clawLiftSubsystemliftHigh = new DigitalInput(0);
        LiveWindow.addSensor("clawLiftSubsystem", "liftHigh", clawLiftSubsystemliftHigh);
        
        clawSubsystemboxState = new DigitalInput(3);
        LiveWindow.addSensor("clawSubsystem", "boxState", clawSubsystemboxState);
        
        clawSubsystemleftClaw = new WPI_VictorSPX(6);
        
        
        clawSubsystemrightClaw = new WPI_VictorSPX(5);
        
        
        winchSubsystemwinchMotor = new VictorSP(5);
        LiveWindow.addActuator("winchSubsystem", "winchMotor", (VictorSP) winchSubsystemwinchMotor);
        winchSubsystemwinchMotor.setInverted(false);
        senorsSubsystemfloorReader = new DigitalInput(9);
        LiveWindow.addSensor("senorsSubsystem", "floorReader", senorsSubsystemfloorReader);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        gyro = new ADXRS450_Gyro();
        LiveWindow.addSensor("Sensors", "gyro", gyro);
       
        
        driveSystemFrontRightTwist.setInputRange(0.0, 360.0);
        driveSystemFrontRightTwist.setOutputRange(-1.0, 1.0);
        driveSystemFrontRightTwist.setContinuous(true);
        
        driveSystemFrontLeftTwist.setInputRange(0.0, 360.0);
        driveSystemFrontLeftTwist.setOutputRange(-1.0, 1.0);
        driveSystemFrontLeftTwist.setContinuous(true);
        
        driveSystemBackLeftTwist.setInputRange(0.0, 360.0);
        driveSystemBackLeftTwist.setOutputRange(-1.0, 1.0);
        driveSystemBackLeftTwist.setContinuous(true);
        
        driveSystemBackRightTwist.setInputRange(0.0, 360.0);
        driveSystemBackRightTwist.setOutputRange(-1.0, 1.0);
        driveSystemBackRightTwist.setContinuous(true);
        
        // BEGIN ERW
        // Sonic Sensors are assigned to DIOs starting at 4 and counter clockwise
        // PWInput parameters are (digitalinput, ignore value, ignore val repeat, ms/cm, max period)
        
//        forwardRightSonar = new PWInput(new DigitalInput(4) , 0, 4, 57.874, 1);
//        rightSideForSonar = new PWInput(new DigitalInput(5) , 0, 4, 57.874, 1);
//        rightSideAftSonar = new PWInput(new DigitalInput(6) , 0, 4, 57.874, 1);
//        leftSideAftSonar = new PWInput(new DigitalInput(7) , 0, 4, 57.874, 1);
//        leftSideForSonar = new PWInput(new DigitalInput(8) , 0, 4, 57.874, 1);
//        forwardLeftSonar = new PWInput(new DigitalInput(9) , 0, 4, 57.874, 1);
        lidar = new PWInput(new DigitalInput(10) , 0, 4, 10, 1);
        
        boxLed = new DigitalOutput(12);
        // END ERW
    }
}
